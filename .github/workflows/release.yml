name: Build and Release

on:
  # Only allow manual releases to prevent duplicate releases on every commit
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major
  # Also trigger on version tags
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run tests
      run: go test -v ./...

    - name: Run go vet
      run: go vet ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Calculate version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # For tag pushes, use the tag version directly
          TAG_NAME="${{ github.ref_name }}"
          VERSION=${TAG_NAME#v}
          NEW_TAG="$TAG_NAME"
          INCREMENT_TYPE="tag"
          echo "Using tag version: $VERSION"
        else
          # For manual triggers, calculate next version
          # Get the latest tag, if any
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Extract version numbers
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Determine increment type
          INCREMENT_TYPE="${{ github.event.inputs.version_type }}"
          echo "Increment type: $INCREMENT_TYPE"
          
          # Increment version based on type
          case $INCREMENT_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          VERSION="${MAJOR}.${MINOR}.${PATCH}"
          NEW_TAG="v${VERSION}"
        fi
        
        echo "New version: $VERSION"
        echo "New tag: $NEW_TAG"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "increment_type=$INCREMENT_TYPE" >> $GITHUB_OUTPUT

    - name: Build for multiple platforms
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        LDFLAGS="-X main.version=v$VERSION -X github.com/ddalab/launcher/pkg/config.Version=v$VERSION"
        
        # Ensure clean build directory
        rm -rf build
        mkdir -p build
        
        echo "Building version: $VERSION"
        echo "Build flags: $LDFLAGS"
        echo "Git commit: ${{ github.sha }}"
        
        # Build for Linux (amd64)
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/ddalab-launcher-v${VERSION}-linux-amd64 cmd/launcher/main.go
        
        # Build for Linux (arm64)
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/ddalab-launcher-v${VERSION}-linux-arm64 cmd/launcher/main.go
        
        # Build for macOS (amd64) - Add .command extension for better macOS recognition
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/ddalab-launcher-v${VERSION}-darwin-amd64.command cmd/launcher/main.go
        
        # Build for macOS (arm64 - Apple Silicon) - Add .command extension for better macOS recognition  
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/ddalab-launcher-v${VERSION}-darwin-arm64.command cmd/launcher/main.go
        
        # Build for Windows (amd64)
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "$LDFLAGS" -o build/ddalab-launcher-v${VERSION}-windows-amd64.exe cmd/launcher/main.go
        
        # Build for Windows (arm64)
        CGO_ENABLED=0 GOOS=windows GOARCH=arm64 go build -ldflags "$LDFLAGS" -o build/ddalab-launcher-v${VERSION}-windows-arm64.exe cmd/launcher/main.go
        
        echo "Build completed. Setting executable permissions for Unix binaries..."
        
        # Set executable permissions for Unix binaries (Linux and macOS)
        chmod +x build/ddalab-launcher-v${VERSION}-linux-amd64
        chmod +x build/ddalab-launcher-v${VERSION}-linux-arm64
        chmod +x build/ddalab-launcher-v${VERSION}-darwin-amd64.command
        chmod +x build/ddalab-launcher-v${VERSION}-darwin-arm64.command
        
        echo "Verifying binaries contain correct version and are executable..."
        
        # Verify Linux binary contains correct version and is executable
        echo "Linux amd64 version check:"
        ./build/ddalab-launcher-v${VERSION}-linux-amd64 --version || echo "Version check failed for Linux binary"
        
        # Check file permissions
        echo "File permissions:"
        ls -la build/

    - name: Create release archives
      run: |
        cd build
        VERSION="${{ steps.version.outputs.version }}"
        
        # Create tarball for Linux amd64
        tar -czf ddalab-launcher-v${VERSION}-linux-amd64.tar.gz ddalab-launcher-v${VERSION}-linux-amd64
        
        # Create tarball for Linux arm64
        tar -czf ddalab-launcher-v${VERSION}-linux-arm64.tar.gz ddalab-launcher-v${VERSION}-linux-arm64
        
        # Create tarball for macOS amd64 (include installer script)
        cp ../scripts/install-macos.sh .
        tar -czf ddalab-launcher-v${VERSION}-darwin-amd64.tar.gz ddalab-launcher-v${VERSION}-darwin-amd64.command install-macos.sh
        
        # Create tarball for macOS arm64 (include installer script)
        tar -czf ddalab-launcher-v${VERSION}-darwin-arm64.tar.gz ddalab-launcher-v${VERSION}-darwin-arm64.command install-macos.sh
        
        # Create zip for Windows amd64
        zip ddalab-launcher-v${VERSION}-windows-amd64.zip ddalab-launcher-v${VERSION}-windows-amd64.exe
        
        # Create zip for Windows arm64
        zip ddalab-launcher-v${VERSION}-windows-arm64.zip ddalab-launcher-v${VERSION}-windows-arm64.exe
        
        echo "Verifying archive contents and permissions..."
        
        # Test that tar preserves executable permissions
        echo "Testing tar archive extraction (Linux amd64):"
        mkdir -p test_extract
        tar -xzf ddalab-launcher-v${VERSION}-linux-amd64.tar.gz -C test_extract
        ls -la test_extract/
        
        # Cleanup test directory
        rm -rf test_extract

    - name: Generate checksums
      run: |
        cd build
        VERSION="${{ steps.version.outputs.version }}"
        sha256sum *.tar.gz *.zip > ddalab-launcher-v${VERSION}-checksums.txt
        cat ddalab-launcher-v${VERSION}-checksums.txt

    - name: Verify release assets
      run: |
        cd build
        VERSION="${{ steps.version.outputs.version }}"
        echo "Verifying all expected files exist..."
        
        EXPECTED_FILES=(
          "ddalab-launcher-v${VERSION}-linux-amd64.tar.gz"
          "ddalab-launcher-v${VERSION}-linux-arm64.tar.gz"
          "ddalab-launcher-v${VERSION}-darwin-amd64.tar.gz"
          "ddalab-launcher-v${VERSION}-darwin-arm64.tar.gz"
          "ddalab-launcher-v${VERSION}-windows-amd64.zip"
          "ddalab-launcher-v${VERSION}-windows-arm64.zip"
          "ddalab-launcher-v${VERSION}-checksums.txt"
        )
        
        for file in "${EXPECTED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "ERROR: Missing file: $file"
            exit 1
          else
            echo "‚úì Found: $file ($(du -h "$file" | cut -f1))"
          fi
        done
        
        echo "All expected files present!"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        fail_on_unmatched_files: true
        body: |
          ## DDALAB Launcher ${{ steps.version.outputs.version }}
          
          **Version increment**: ${{ steps.version.outputs.increment_type }}
          **Built from commit**: [`${{ github.sha }}`](https://github.com/sdraeger/DDALAB-launcher/commit/${{ github.sha }})
          **Build date**: ${{ github.event.head_commit.timestamp }}
          
          ‚ö†Ô∏è **Important**: All binaries in this release are freshly built with version `${{ steps.version.outputs.version }}` embedded. Use `--version` flag to verify.
          
          ### üöÄ Features
          - Cross-platform DDALAB management tool
          - Modern interactive terminal UI with bubbletea
          - Interrupt support for long-running operations (Ctrl+C)
          - Auto-detection of DDALAB installations
          - Status monitoring and log viewing
          - Self-update functionality with GitHub integration
          - Live DDALAB status display with colored indicators
          
          ### üì¶ Downloads
          
          Choose the appropriate binary for your platform:
          
          **Linux:**
          - `ddalab-launcher-v${{ steps.version.outputs.version }}-linux-amd64.tar.gz` - For Intel/AMD 64-bit systems
          - `ddalab-launcher-v${{ steps.version.outputs.version }}-linux-arm64.tar.gz` - For ARM 64-bit systems (e.g., Raspberry Pi)
          
          **macOS:**
          - `ddalab-launcher-v${{ steps.version.outputs.version }}-darwin-amd64.tar.gz` - For Intel Macs
          - `ddalab-launcher-v${{ steps.version.outputs.version }}-darwin-arm64.tar.gz` - For Apple Silicon Macs (M1/M2)
          
          **Windows:**
          - `ddalab-launcher-v${{ steps.version.outputs.version }}-windows-amd64.zip` - For Intel/AMD 64-bit systems
          - `ddalab-launcher-v${{ steps.version.outputs.version }}-windows-arm64.zip` - For ARM 64-bit systems
          
          ### üîê Verification
          Use the `ddalab-launcher-v${{ steps.version.outputs.version }}-checksums.txt` file to verify the integrity of your download:
          ```bash
          sha256sum -c ddalab-launcher-v${{ steps.version.outputs.version }}-checksums.txt
          ```
          
          ### üìñ Installation
          
          #### Linux
          1. Download: `ddalab-launcher-v${{ steps.version.outputs.version }}-linux-<arch>.tar.gz`
          2. Extract: `tar -xzf ddalab-launcher-v${{ steps.version.outputs.version }}-linux-<arch>.tar.gz`
          3. Run: `./ddalab-launcher-v${{ steps.version.outputs.version }}-linux-<arch>`
          
          #### macOS
          1. Download: `ddalab-launcher-v${{ steps.version.outputs.version }}-darwin-<arch>.tar.gz`
          2. Extract: `tar -xzf ddalab-launcher-v${{ steps.version.outputs.version }}-darwin-<arch>.tar.gz`
          3. **Easy install** (recommended):
             ```bash
             ./install-macos.sh
             ```
          4. **Manual install** (alternative):
             ```bash
             sudo xattr -rd com.apple.quarantine ddalab-launcher-v${{ steps.version.outputs.version }}-darwin-<arch>.command
             ```
          5. **Run**: `./ddalab-launcher-v${{ steps.version.outputs.version }}-darwin-<arch>.command` or double-click
          
          **macOS Security Notes**: 
          - This binary is unsigned open-source software
          - The `install-macos.sh` script automates quarantine removal and setup
          - Alternative: Right-click ‚Üí "Open" ‚Üí "Open" (bypasses Gatekeeper but shows warning each time)
          - After setup, the launcher works normally
          
          #### Windows
          1. Download: `ddalab-launcher-v${{ steps.version.outputs.version }}-windows-<arch>.zip`
          2. Extract the zip file
          3. Run: `ddalab-launcher-v${{ steps.version.outputs.version }}-windows-<arch>.exe`
          
          ### üêõ Issues
          Report issues at: https://github.com/sdraeger/DDALAB-launcher/issues
        files: |
          build/*.tar.gz
          build/*.zip
          build/*-checksums.txt
        generate_release_notes: false
        draft: false
        prerelease: false

  update-submodule:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    steps:
    - name: Trigger submodule update in main repository
      run: |
        echo "New launcher version ${{ needs.build.outputs.version }} released"
        echo "Tag: ${{ needs.build.outputs.tag }}"
        # Future: Could trigger a workflow in the main DDALAB repository to update the submodule